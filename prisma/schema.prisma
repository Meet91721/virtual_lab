datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model User {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    email          String        @unique
    hashedPassword String
    role           Role          @default(USER)
    roleAccepted   Boolean       @default(false)
    createdAt      DateTime      @default(now())
    Experiment    Experiment[]
    userResult     Result[]
}

model Experiment {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId   String   @db.ObjectId
    title      String
    theory     String
    procedure  String
    evaluation String?
    assignment Problemset[]
    references String?
    results    Result[]
    createdAt  DateTime @default(now())
}

model Result {
    id           String      @id @default(auto()) @map("_id") @db.ObjectId
    examinee     User        @relation(fields: [examineeId], references: [id], onDelete: Cascade)
    examineeId   String      @db.ObjectId
    experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
    experimentId String      @db.ObjectId
    result       String
    createdAt    DateTime    @default(now())
}

model Problemset{
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    experiment     Experiment     @relation(fields: [experimentId], references: [id], onDelete: Cascade)
    experimentId   String   @db.ObjectId
    question	String
    options	String[]
    answer	Int
}


model testing {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String
}

enum Role {
    USER
    PROFESSOR
    ADMIN
}
